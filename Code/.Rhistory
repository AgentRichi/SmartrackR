library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
install.packages('rJava')
library(rJava)
library(xlsx)
library(rJava)
library(xlsx)
install.packages('rJava')
library(xlsx)
libary(rJava)
library(rJava)
Sys.getenv()
Sys.getenv()
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
list.files()
c(list.files(),list.files('..\\Data\\'))
c(list.files(),list.files('..\\Input\\'))
tfv_file <- c(list.files("..\\Data\\"),list.files("..\\Dropbox\\"))
tfv_file
buses <- data.frame()
numFiles <- length(tfv_file)
if(numFiles>0) {
for(i in 1:numFiles)
{
buses <- rbind(buses,suppressWarnings(fread(tfv_file[i],
select = c(1:7))))
}
names(buses) <- gsub("[ ^[:blank:]:()+?&/\\-]", ".", names(buses))
buses <- unique(buses)
routes <- read.xlsx("..\\Input\\BusRoutes.xlsx",
sheetName = "BusRoutes",
stringsAsFactors=FALSE,
as.data.frame = T) %>% na.omit()
}
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
tfv_file <- c(list.files("..\\Data\\"),list.files("..\\Dropbox\\Data\\"))
tfv_file
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
#Load all data
tfv_file <- c(list.files("..\\Data\\"),list.files("..\\Dropbox\\Data\\"))
buses <- data.frame()
numFiles <- length(tfv_file)
if(numFiles>0) {
for(i in 1:numFiles)
{
buses <- rbind(buses,suppressWarnings(fread(tfv_file[i],
select = c(1:7))))
}
names(buses) <- gsub("[ ^[:blank:]:()+?&/\\-]", ".", names(buses))
buses <- unique(buses)
routes <- read.xlsx("..\\Input\\BusRoutes.xlsx",
sheetName = "BusRoutes",
stringsAsFactors=FALSE,
as.data.frame = T) %>% na.omit()
}
tfv_file
tfv_file <- c(list.files("..\\Data\\"),list.files("..\\Dropbox\\Data\\"))
buses <- data.frame()
numFiles <- length(tfv_file)
test <- fread(tfv_file[],
select = c(1:7))
test <- fread(tfv_file[1],
select = c(1:7))
tfv_file <- list.files("..\\Data\\")
tfv_file2 <- list.files("..\\Dropbox\\Data\\")
buses <- data.frame()
numFiles <- length(c(tfv_file,tfv_file2))
numFiles
buses
length(buses)
###########################
# STEP 1: Load the data
###########################
#Load all data
tfv_file <- list.files("..\\Data\\")
tfv_file2 <- list.files("..\\Dropbox\\Data\\")
buses <- data.frame()
buses2 <- data.frame()
if(length(tfv_file)>0) {
for(i in 1:length(tfv_file))
{
buses <- rbind(buses,suppressWarnings(fread(tfv_file[i],
select = c(1:7))))
}
}
if(length(tfv_file2)>0) {
for(i in 1:length(tfv_file2))
{
buses <- rbind(buses,suppressWarnings(fread(tfv_file2[i],
select = c(1:7))))
}
}
###########################
# STEP 1: Load the data
###########################
#Load all data
tfv_file <- list.files("..\\Data\\")
tfv_file2 <- list.files("..\\Dropbox\\Data\\")
buses <- data.frame()
buses2 <- data.frame()
if(length(tfv_file)>0) {
setwd("..\\Data\\")
for(i in 1:length(tfv_file))
{
buses <- rbind(buses,suppressWarnings(fread(tfv_file[i],
select = c(1:7))))
}
}
if(length(tfv_file2)>0) {
setwd("..\\Dropbox\\Data\\")
for(i in 1:length(tfv_file2))
{
buses <- rbind(buses,suppressWarnings(fread(tfv_file2[i],
select = c(1:7))))
}
setwd("..\\")
}
if (length(buses)>0) {
names(buses) <- gsub("[ ^[:blank:]:()+?&/\\-]", ".", names(buses))
buses <- unique(buses)
routes <- read.xlsx("..\\Input\\BusRoutes.xlsx",
sheetName = "BusRoutes",
stringsAsFactors=FALSE,
as.data.frame = T) %>% na.omit()
}
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
setwd("..\\")
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
setwd("\\Code")
setwd("Code")
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
###########################
# STEP 2: Clean the data
###########################
if(nrow(buses)!=0) {
source('..\\Code\\cleanBuses.R')
###########################
# STEP 3: Assign Bus Routes
###########################
source('..\\Code\\assignRoutes.R')
###########################
# STEP 4: Calculate Metrics
###########################
source('..\\Code\\calculateMetrics.R')
}
#######################
# STEP 5: Load Tables
#######################
#CODE FOR RRB TABLE
source('..\\Code\\railRep.R')
#remove uneccessary variables
remove(list=setdiff(ls(),c("railRep")))
gc()
if (nrow(railRep)>0) {
#CODE FOR TRAVEL TIMES TABLE
source('..\\Code\\travelTimes.R')
#CODE FOR JOURNEY TIMES TABLE
source('..\\Code\\journeyTimes.R')
#Refresh/create files with yesterdays and todays Peak travel information
source('..\\Code\\writeFile.R')
}
setwd("..\\Data\\")
tfv_file <- list.files()
numFiles <- length(tfv_file)
if(numFiles>0) {
for(i in 1:numFiles)
{
file.rename(tfv_file[i],paste0(Sys.Date(),"_",i,"_OneDrive.csv"))
if (file.exists(paste0(Sys.Date(),"_",i,"_OneDrive.csv"))) {
file.move(paste0(Sys.Date(),"_",i,"_OneDrive.csv"),"..\\Data_hist")
}
}
}
setwd("..\\Dropbox\\Data\\")
tfv_file <- list.files()
numFiles <- length(tfv_file)
if(numFiles>0) {
for(i in 1:numFiles)
{
file.rename(tfv_file[i],paste0(Sys.Date(),"_",i,"_DropBox.csv"))
if (file.exists(paste0(Sys.Date(),"_",i,"_DropBox.csv"))) {
file.move(paste0(Sys.Date(),"_",i,"_DropBox.csv"),"..\\..\\Data_hist")
}
}
}
setwd("..\\")
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
View(routes)
nrow(buses)!=0
routes[c("start.datetime","end.datetime","start.time.filter","end.time.filter")] <- force_tz(
routes[c("start.datetime","end.datetime","start.time.filter","end.time.filter")],tz="UTC")
buses_dup <- select(buses,Resource.Name,Registration,
Enter.Odometer..km.,Distance.Travelled..km.,
Geofence.Name) %>% duplicated(fromLast=T)
buses <- buses %>% filter(Geofence.Name != "", !buses_dup)
arrival.1 = as.POSIXct(strptime(gsub('[\\.]','',buses$Enter.Time),
format = '%d/%m/%Y %I:%M:%S %p'))
arrival.2 = as.POSIXct(strptime(gsub('[\\.]','',buses$Enter.Time),
format = '%d/%m/%Y %H:%M'))
arrival.1[is.na(arrival.1)] <- arrival.2[is.na(arrival.1)]
arrival.1 <- force_tz(arrival.1,tz="UTC")
buses <- buses %>% mutate(arrival = arrival.1,
stop.order = unlist(lapply(strsplit(Geofence.Name," - "),'[[',3)),
destination = unlist(lapply(strsplit(Geofence.Name," - "),'[[',4))) %>%
arrange(Resource.Name, arrival)
tmp <- strsplit(buses$Time.Inside.Geofence..hh.mm.ss., split=":") %>% lapply(as.numeric,1)
dwellTime <- do.call(rbind, lapply(tmp, rbind))
dwellTime <- dwellTime[,1]*60*60 + dwellTime[,2]*60 + dwellTime[,3]
buses$dwellTime <- dwellTime
buses <- buses %>% mutate(departure = lag(dwellTime,1)+lag(arrival,1),
origin = ifelse(lag(Resource.Name,1)==Resource.Name,lag(destination,1),"0")) %>%
mutate(legTime = difftime(arrival,departure, tz = "AEST", units = "mins")+(dwellTime/60))
buses$origin[1] <- "0"
#assign ID
buses <- cbind("ID" = sprintf("%07d", 1:nrow(buses)), buses)
View(buses)
View(buses %>% filter(destination %in% c('Peel Street','King Street')))
# Change des & org labels
flagstaff = c('Peel Street','King Street')
flagstaff
buses$origin[buses$origin %in% flagstaff]
buses$origin[buses$origin == 'Racecourse']
buses$origin[buses$origin == 'Racecourse'] <- 'Flemington'
buses$origin[buses$destination == 'Racecourse'] <- 'Flemington'
buses$origin[buses$origin %in% flagstaff] <- 'Flagstaff'
buses$origin[buses$destination %in% flagstaff] <- 'Flagstaff'
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
source('..\\Code\\cleanBuses.R')
source('..\\Code\\assignRoutes.R')
###########################
# STEP 4: Calculate Metrics
###########################
source('..\\Code\\calculateMetrics.R')
source('..\\Code\\assignRoutes.R')
###########################
# STEP 4: Calculate Metrics
###########################
source('..\\Code\\calculateMetrics.R')
###########################
# STEP 3: Assign Bus Routes
###########################
#function to append rows during bus validation
dt.append <- function(x1, x2) {
obj <- deparse(substitute(x1)) # get the actual object name as a string
assign(obj, value = data.table::rbindlist(list(x1, x2)), envir = .GlobalEnv)
}
#Function to determine which peak period the route belongs to
peak <- function(x,am.start,am.end,pm.start,pm.end) {
x <- x %>% format("%H%M%S") %>% as.numeric()
am.start <- am.start %>% format("%H%M%S") %>% as.numeric()
am.end <- am.end %>% format("%H%M%S") %>% as.numeric()
pm.start <- pm.start %>% format("%H%M%S") %>% as.numeric()
pm.end <- pm.end %>% format("%H%M%S") %>% as.numeric()
if(between(x,am.start,am.end)) "AM Peak"
else if(between(x,pm.start,pm.end)) "PM Peak"
else if(between(x,am.end,pm.start)) "Inter Peak"
else "Off Peak"
}
#define peak periods
am.start <- as.POSIXct("1899-12-30 7:00:00") %>% force_tz(tz="UCT")
am.end <- as.POSIXct("1899-12-30 9:00:00 UTC") %>% force_tz(tz="UCT")
pm.start <- as.POSIXct("1899-12-30 15:30:00 UTC") %>% force_tz(tz="UCT")
pm.end <- as.POSIXct("1899-12-30 19:00:00 UTC") %>% force_tz(tz="UCT")
#compare bus stopping pattern to route and assign name
#for loop variables
buses$tripID <- c(rep(0,nrow(buses)))
buses$type <- c(rep(0,nrow(buses)))
buses$direction <- c(rep(0,nrow(buses)))
buses$peak <- c(rep(0,nrow(buses)))
buses$onTime <- c(rep(0,nrow(buses)))
buses$project <- c(rep(0,nrow(buses)))
buses$interchange <- c(rep("-",nrow(buses)))
routes <- routes %>% filter(start.datetime <= max(buses$departure,na.rm = T) , end.datetime >= min(buses$departure,na.rm = T))
View(routes)
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
###########################
# STEP 2: Clean the data
###########################
if(nrow(buses)!=0) {
source('..\\Code\\cleanBuses.R')
###########################
# STEP 3: Assign Bus Routes
###########################
source('..\\Code\\assignRoutes.R')
###########################
# STEP 4: Calculate Metrics
###########################
source('..\\Code\\calculateMetrics.R')
}
View(railRep)
View(railRep %>% filter(departure > as.Date('2019-08-29')))
table(railRep$project)
View(route)
View(route)
View(routes)
View(buses)
View(buses[buses$origin=='Flagstaff',])
rm(list=ls(all=TRUE))
# Run next 3 lines only if using source() to run the script
work_dir <- dirname(parent.frame(2)$ofile)
setwd(work_dir)
setwd(getwd())
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
library(data.table)
library(filesstrings)
###########################
# STEP 1: Load the data
###########################
source('..\\Code\\readFile.R')
###########################
# STEP 2: Clean the data
###########################
if(nrow(buses)!=0) {
source('..\\Code\\cleanBuses.R')
###########################
# STEP 3: Assign Bus Routes
###########################
source('..\\Code\\assignRoutes.R')
###########################
# STEP 4: Calculate Metrics
###########################
source('..\\Code\\calculateMetrics.R')
}
View(railRep %>% filter(departure > as.Date('2019-08-29')))
#######################
# STEP 5: Load Tables
#######################
#CODE FOR RRB TABLE
source('..\\Code\\railRep.R')
#remove uneccessary variables
remove(list=setdiff(ls(),c("railRep")))
gc()
if (nrow(railRep)>0) {
#CODE FOR TRAVEL TIMES TABLE
source('..\\Code\\travelTimes.R')
#CODE FOR JOURNEY TIMES TABLE
source('..\\Code\\journeyTimes.R')
#Refresh/create files with yesterdays and todays Peak travel information
source('..\\Code\\writeFile.R')
}
