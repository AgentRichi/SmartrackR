#Function to determine which peak period the route belongs to
peak <- function(x,am.start,am.end,pm.start,pm.end) {
x <- x %>% format("%H%M%S") %>% as.numeric()
am.start <- am.start %>% format("%H%M%S") %>% as.numeric()
am.end <- am.end %>% format("%H%M%S") %>% as.numeric()
pm.start <- pm.start %>% format("%H%M%S") %>% as.numeric()
pm.end <- pm.end %>% format("%H%M%S") %>% as.numeric()
if(between(x,am.start,am.end)) "AM Peak"
else if(between(x,pm.start,pm.end)) "PM Peak"
else if(between(x,am.end,pm.start)) "Inter Peak"
else "Off Peak"
}
###########################
# STEP 1: Load the data
###########################
tfv_file <- list.files()
buses <- data.frame()
for(i in 1:length(tfv_file))
{
buses <- rbind(buses,
read.csv(tfv_file[i],
header = TRUE,
stringsAsFactors = F,
skip=0))
}
setwd(work_dir)
routes <- read.xlsx("Input/BusRoutes.xlsx",
sheetName = "BusRoutes",
stringsAsFactors=FALSE,
as.data.frame = T) %>% na.omit()
###########################
# STEP 2: Clean the data
###########################
routes[c("start.datetime","end.datetime","start.time.filter","end.time.filter")] <- force_tz(
routes[c("start.datetime","end.datetime","start.time.filter","end.time.filter")],tz="Australia/Sydney")
buses <- buses %>% filter(Geofence.Name != "")
#Enter.Time is in a different format when loading csv compared to converting from xlsx
# for csv direct download use as.POSIXct(strptime(gsub('[\\.]','',Enter.Time), format = '%d/%m/%Y %H:%M'))
# for converted csv use as.POSIXct(Enter.Time), format = '%d/%m/%Y %I:%M:%S %p'
# format arrival time and separate geofence name into columns, then order by bus and timestamp
buses <- buses %>% mutate(arrival = as.POSIXct(strptime(gsub('[\\.]','',Enter.Time),
format = '%d/%m/%Y %I:%M:%S %p')),
project = unlist(lapply(strsplit(Geofence.Name," - "),'[[',2)),
stop.order = as.numeric(unlist(lapply(strsplit(Geofence.Name," - "),'[[',3))),
destination = unlist(lapply(strsplit(Geofence.Name," - "),'[[',4))) %>%
arrange(Resource.Name, seconds(Enter.Time))
#format dwell time into seconds
tmp <- strsplit(buses$Time.Inside.Geofence..hh.mm.ss., split=":") %>% lapply(as.numeric,1)
dwellTime <- do.call(rbind, lapply(tmp, rbind))
dwellTime <- dwellTime[,1]*60*60 + dwellTime[,2]*60 + dwellTime[,3]
buses$dwellTime <- dwellTime
#calculate departure time (arrival+dwell) and get origin from preceding row
buses <- buses %>% mutate(departure = lag(dwellTime,1)+lag(arrival,1),
origin = ifelse(lag(Resource.Name,1)==Resource.Name,lag(destination,1),"0"))
buses$origin[1] <- "0"
#assign ID
buses <- cbind("ID" = sprintf("%06d", 1:nrow(buses)), buses)
###########################
# STEP 3: Assign Bus Routes
###########################
#define peak periods
am.start <- as.POSIXct("1899-12-30 7:00:00 AEST")
am.end <- as.POSIXct("1899-12-30 9:00:00 AEST")
pm.start <- as.POSIXct("1899-12-30 15:30:00 AEST")
pm.end <- as.POSIXct("1899-12-30 19:00:00 AEST")
#compare bus stopping pattern to route and assign name
#for loop variables
buses$tripID <- c(rep(0,nrow(buses)))
buses$type <- c(rep(0,nrow(buses)))
buses$direction <- c(rep(0,nrow(buses)))
buses$peak <- c(rep(0,nrow(buses)))
for(i in 1:nrow(routes)){
#route stopping patterns
route <- routes[i,]
pattern <- unlist(strsplit(route$stops,",")) %>% trimws() %>% toupper()
pattern.rev <- unlist(strsplit(route$stops,",")) %>% trimws() %>% toupper() %>% rev()
#Filter dataset to dates and times
railRep <- buses %>% filter(departure >= route$start.datetime &
arrival <= route$end.datetime &
between(as.numeric(format(arrival,"%H%M%S")),
as.numeric(format(route$start.time.filter,"%H%M%S")),
as.numeric(format(route$end.time.filter,"%H%M%S"))))
#adjust peak periods
peak.adjust <- minutes(route$peak.adjust)
am.start.route <- (am.start + peak.adjust)
am.end.route <- (am.end + peak.adjust)
pm.start.route <- (pm.start + peak.adjust)
pm.end.route <- (pm.end + peak.adjust)
#while loop variables
stops <- 1
tripID <- 1
org <- railRep$origin %>% trimws() %>% toupper()
des <- railRep$destination %>% trimws() %>% toupper()
N <- length(pattern)
while(stops <= (nrow(railRep)-(N-2))) {
#if bus is travelling in UP direction
if((org[stops]==pattern[1]) && (all.equal(des[stops:(stops+N-2)],pattern[2:N])==T)) {
railRep$tripID[stops:(stops+N-2)] <- paste0(gsub(" ","",route$name),
sprintf("%06d",tripID))
railRep$type[stops:(stops+N-2)] = route$name
railRep$direction[stops:(stops+N-2)] = "UP"
railRep$peak[stops:(stops+N-2)] <- peak(railRep$arrival[(stops+N-2)],
am.start.route,am.end.route,
pm.start.route,pm.end.route)
#remove dwelltime from final destination
railRep$dwellTime[(stops+N-2)] = 0
tripID <- tripID+1
stops = stops+(N-1)
}
#if bus is travelling in DOWN direction
else if((org[stops]==pattern.rev[1]) && (all.equal(des[stops:(stops+N-2)],pattern.rev[2:N])==T)) {
railRep$tripID[stops:(stops+N-2)] <- paste0(gsub(" ","",route$name),
sprintf("%06d",tripID))
railRep$type[stops:(stops+N-2)] = route$name
railRep$direction[stops:(stops+N-2)] = "DOWN"
railRep$peak[stops:(stops+N-2)] <- peak(railRep$departure[stops],
am.start.route,am.end.route,
pm.start.route,pm.end.route)
#remove dwelltime from final destination
railRep$dwellTime[(stops+N-2)] = 0
tripID <- tripID+1
stops = stops+(N-1)
}
#else not a replacement bus
else(stops = stops+1)
}
#assign replacement buses according to ID
buses$tripID[match(railRep$ID,buses$ID)] <- railRep$tripID
buses$type[match(railRep$ID,buses$ID)] <- railRep$type
buses$direction[match(railRep$ID,buses$ID)] <- railRep$direction
buses$peak[match(railRep$ID,buses$ID)] <- railRep$peak
buses$dwellTime[match(railRep$ID,buses$ID)] <- railRep$dwellTime
}
###########################
# STEP 4: Calculate Metrics
###########################
#remove non RRP Buses and unnecessary columns
railRep <- buses %>% filter(type != "0" ) %>%
select(ID,Resource.Name,Registration,project,tripID,type,peak,
direction,origin,destination,departure,arrival,dwellTime) %>%
mutate(legTime = round(difftime(arrival,departure, tz = "AEST", units = "mins")+(dwellTime/60),2))
View(railRep[railRep$tripID=="PKH-DNGLTDEXP000079",])
View(railRep)
rm(list=ls(all=TRUE))
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
work_dir <- "C:/Data/SmartrackR/"
setwd(paste0(work_dir, "./Data/"))
#Function to determine which peak period the route belongs to
peak <- function(x,am.start,am.end,pm.start,pm.end) {
x <- x %>% format("%H%M%S") %>% as.numeric()
am.start <- am.start %>% format("%H%M%S") %>% as.numeric()
am.end <- am.end %>% format("%H%M%S") %>% as.numeric()
pm.start <- pm.start %>% format("%H%M%S") %>% as.numeric()
pm.end <- pm.end %>% format("%H%M%S") %>% as.numeric()
if(between(x,am.start,am.end)) "AM Peak"
else if(between(x,pm.start,pm.end)) "PM Peak"
else if(between(x,am.end,pm.start)) "Inter Peak"
else "Off Peak"
}
###########################
# STEP 1: Load the data
###########################
tfv_file <- list.files()
buses <- data.frame()
for(i in 1:length(tfv_file))
{
buses <- rbind(buses,
read.csv(tfv_file[i],
header = TRUE,
stringsAsFactors = F,
skip=0))
}
setwd(work_dir)
routes <- read.xlsx("Input/BusRoutes.xlsx",
sheetName = "BusRoutes",
stringsAsFactors=FALSE,
as.data.frame = T) %>% na.omit()
###########################
# STEP 2: Clean the data
###########################
routes[c("start.datetime","end.datetime","start.time.filter","end.time.filter")] <- force_tz(
routes[c("start.datetime","end.datetime","start.time.filter","end.time.filter")],tz="Australia/Sydney")
buses <- buses %>% filter(Geofence.Name != "")
#Enter.Time is in a different format when loading csv compared to converting from xlsx
# for csv direct download use as.POSIXct(strptime(gsub('[\\.]','',Enter.Time), format = '%d/%m/%Y %H:%M'))
# for converted csv use as.POSIXct(Enter.Time), format = '%d/%m/%Y %I:%M:%S %p'
# format arrival time and separate geofence name into columns, then order by bus and timestamp
buses <- buses %>% mutate(arrival = as.POSIXct(strptime(gsub('[\\.]','',Enter.Time),
format = '%d/%m/%Y %I:%M:%S %p')),
project = unlist(lapply(strsplit(Geofence.Name," - "),'[[',2)),
stop.order = as.numeric(unlist(lapply(strsplit(Geofence.Name," - "),'[[',3))),
destination = unlist(lapply(strsplit(Geofence.Name," - "),'[[',4))) %>%
arrange(Resource.Name, seconds(Enter.Time))
#format dwell time into seconds
tmp <- strsplit(buses$Time.Inside.Geofence..hh.mm.ss., split=":") %>% lapply(as.numeric,1)
dwellTime <- do.call(rbind, lapply(tmp, rbind))
dwellTime <- dwellTime[,1]*60*60 + dwellTime[,2]*60 + dwellTime[,3]
buses$dwellTime <- dwellTime
#calculate departure time (arrival+dwell) and get origin from preceding row
buses <- buses %>% mutate(departure = lag(dwellTime,1)+lag(arrival,1),
origin = ifelse(lag(Resource.Name,1)==Resource.Name,lag(destination,1),"0"))
buses$origin[1] <- "0"
#assign ID
buses <- cbind("ID" = sprintf("%06d", 1:nrow(buses)), buses)
###########################
# STEP 3: Assign Bus Routes
###########################
#define peak periods
am.start <- as.POSIXct("1899-12-30 7:00:00 AEST")
am.end <- as.POSIXct("1899-12-30 9:00:00 AEST")
pm.start <- as.POSIXct("1899-12-30 15:30:00 AEST")
pm.end <- as.POSIXct("1899-12-30 19:00:00 AEST")
#compare bus stopping pattern to route and assign name
#for loop variables
buses$tripID <- c(rep(0,nrow(buses)))
buses$type <- c(rep(0,nrow(buses)))
buses$direction <- c(rep(0,nrow(buses)))
buses$peak <- c(rep(0,nrow(buses)))
for(i in 1:nrow(routes)){
#route stopping patterns
route <- routes[i,]
pattern <- unlist(strsplit(route$stops,",")) %>% trimws() %>% toupper()
pattern.rev <- unlist(strsplit(route$stops,",")) %>% trimws() %>% toupper() %>% rev()
#Filter dataset to dates and times
railRep <- buses %>% filter(departure >= route$start.datetime &
arrival <= route$end.datetime &
between(as.numeric(format(arrival,"%H%M%S")),
as.numeric(format(route$start.time.filter,"%H%M%S")),
as.numeric(format(route$end.time.filter,"%H%M%S"))))
#adjust peak periods
peak.adjust <- minutes(route$peak.adjust)
am.start.route <- (am.start + peak.adjust)
am.end.route <- (am.end + peak.adjust)
pm.start.route <- (pm.start + peak.adjust)
pm.end.route <- (pm.end + peak.adjust)
#while loop variables
stops <- 1
tripID <- 1
org <- railRep$origin %>% trimws() %>% toupper()
des <- railRep$destination %>% trimws() %>% toupper()
N <- length(pattern)
while(stops <= (nrow(railRep)-(N-2))) {
#if bus is travelling in UP direction
if((all.equal(org[stops:(stops+N-2)],pattern[1:(N-1)])==T) &&
(all.equal(des[stops:(stops+N-2)],pattern[2:N])==T)) {
railRep$tripID[stops:(stops+N-2)] <- paste0(gsub(" ","",route$name),
sprintf("%06d",tripID))
railRep$type[stops:(stops+N-2)] = route$name
railRep$direction[stops:(stops+N-2)] = "UP"
railRep$peak[stops:(stops+N-2)] <- peak(railRep$arrival[(stops+N-2)],
am.start.route,am.end.route,
pm.start.route,pm.end.route)
#remove dwelltime from final destination
railRep$dwellTime[(stops+N-2)] = 0
tripID <- tripID+1
stops = stops+(N-1)
}
#if bus is travelling in DOWN direction
else if((all.equal(org[stops:(stops+N-2)],pattern.rev[1:(N-1)])==T) &&
(all.equal(des[stops:(stops+N-2)],pattern.rev[2:N])==T)) {
railRep$tripID[stops:(stops+N-2)] <- paste0(gsub(" ","",route$name),
sprintf("%06d",tripID))
railRep$type[stops:(stops+N-2)] = route$name
railRep$direction[stops:(stops+N-2)] = "DOWN"
railRep$peak[stops:(stops+N-2)] <- peak(railRep$departure[stops],
am.start.route,am.end.route,
pm.start.route,pm.end.route)
#remove dwelltime from final destination
railRep$dwellTime[(stops+N-2)] = 0
tripID <- tripID+1
stops = stops+(N-1)
}
#else not a replacement bus
else(stops = stops+1)
}
#assign replacement buses according to ID
buses$tripID[match(railRep$ID,buses$ID)] <- railRep$tripID
buses$type[match(railRep$ID,buses$ID)] <- railRep$type
buses$direction[match(railRep$ID,buses$ID)] <- railRep$direction
buses$peak[match(railRep$ID,buses$ID)] <- railRep$peak
buses$dwellTime[match(railRep$ID,buses$ID)] <- railRep$dwellTime
}
###########################
# STEP 4: Calculate Metrics
###########################
#remove non RRP Buses and unnecessary columns
railRep <- buses %>% filter(type != "0" ) %>%
select(ID,Resource.Name,Registration,project,tripID,type,peak,
direction,origin,destination,departure,arrival,dwellTime) %>%
mutate(legTime = round(difftime(arrival,departure, tz = "AEST", units = "mins")+(dwellTime/60),2))
View(railRep)
day(railRep$departure[1])
day(railRep$arrival[1])
railRep <- buses %>% filter((type != "0") & (day(departure)==day(arrival))) %>%
select(ID,Resource.Name,Registration,project,tripID,type,peak,
direction,origin,destination,departure,arrival,dwellTime) %>%
mutate(legTime = round(difftime(arrival,departure, tz = "AEST", units = "mins")+(dwellTime/60),2))
View(railRep)
#remove non RRP Buses and unnecessary columns
railRep <- buses %>% filter(type != "0") %>%
select(ID,Resource.Name,Registration,project,tripID,type,peak,
direction,origin,destination,departure,arrival,dwellTime) %>%
mutate(legTime = round(difftime(arrival,departure, tz = "AEST", units = "mins")+(dwellTime/60),2)) %>%
file(legTime<120)
#remove non RRP Buses and unnecessary columns
railRep <- buses %>% filter(type != "0") %>%
select(ID,Resource.Name,Registration,project,tripID,type,peak,
direction,origin,destination,departure,arrival,dwellTime) %>%
mutate(legTime = round(difftime(arrival,departure, tz = "AEST", units = "mins")+(dwellTime/60),2)) %>%
filer(legTime < 120)
#remove non RRP Buses and unnecessary columns
railRep <- buses %>% filter(type != "0") %>%
select(ID,Resource.Name,Registration,project,tripID,type,peak,
direction,origin,destination,departure,arrival,dwellTime) %>%
mutate(legTime = round(difftime(arrival,departure, tz = "AEST", units = "mins")+(dwellTime/60),2)) %>%
filter(legTime < 120)
View(railRep)
travel_times <- railRep %>%
group_by(tripId, type, direction, peak, Resource.Name, date(departure)) %>%
summarise(Origin = first(origin), Destination = last(destination),
Departure = first(departure), Arrival = last(arrival),
TripTime = sum(legTime))
travel_times <- railRep %>%
group_by(tripID, type, direction, peak, Resource.Name, date(departure)) %>%
summarise(Origin = first(origin), Destination = last(destination),
Departure = first(departure), Arrival = last(arrival),
TripTime = sum(legTime))
View(travel_times)
journey_times <- travel_times %>% group_by(type, peak, direction) %>%
summarise(TravelTimes = mean(TripTime),
NumBuses = n())
View(journey_times)
journey_times <- travel_times %>% group_by(type, peak, direction) %>%
summarise(TravelTimes = round(mean(TripTime),2),
NumBuses = n())
rm(list=ls(all=TRUE))
library(dplyr)
library(magrittr)
library(lubridate)
library(xlsx)
work_dir <- "C:/Data/SmartrackR/"
setwd(paste0(work_dir, "./Data/"))
#Function to determine which peak period the route belongs to
peak <- function(x,am.start,am.end,pm.start,pm.end) {
x <- x %>% format("%H%M%S") %>% as.numeric()
am.start <- am.start %>% format("%H%M%S") %>% as.numeric()
am.end <- am.end %>% format("%H%M%S") %>% as.numeric()
pm.start <- pm.start %>% format("%H%M%S") %>% as.numeric()
pm.end <- pm.end %>% format("%H%M%S") %>% as.numeric()
if(between(x,am.start,am.end)) "AM Peak"
else if(between(x,pm.start,pm.end)) "PM Peak"
else if(between(x,am.end,pm.start)) "Inter Peak"
else "Off Peak"
}
###########################
# STEP 1: Load the data
###########################
tfv_file <- list.files()
buses <- data.frame()
for(i in 1:length(tfv_file))
{
buses <- rbind(buses,
read.csv(tfv_file[i],
header = TRUE,
stringsAsFactors = F,
skip=0))
}
setwd(work_dir)
routes <- read.xlsx("Input/BusRoutes.xlsx",
sheetName = "BusRoutes",
stringsAsFactors=FALSE,
as.data.frame = T) %>% na.omit()
###########################
# STEP 2: Clean the data
###########################
routes[c("start.datetime","end.datetime","start.time.filter","end.time.filter")] <- force_tz(
routes[c("start.datetime","end.datetime","start.time.filter","end.time.filter")],tz="Australia/Sydney")
buses <- buses %>% filter(Geofence.Name != "")
#Enter.Time is in a different format when loading csv compared to converting from xlsx
# for csv direct download use as.POSIXct(strptime(gsub('[\\.]','',Enter.Time), format = '%d/%m/%Y %H:%M'))
# for converted csv use as.POSIXct(Enter.Time), format = '%d/%m/%Y %I:%M:%S %p'
# format arrival time and separate geofence name into columns, then order by bus and timestamp
buses <- buses %>% mutate(arrival = as.POSIXct(strptime(gsub('[\\.]','',Enter.Time),
format = '%d/%m/%Y %I:%M:%S %p')),
project = unlist(lapply(strsplit(Geofence.Name," - "),'[[',2)),
stop.order = as.numeric(unlist(lapply(strsplit(Geofence.Name," - "),'[[',3))),
destination = unlist(lapply(strsplit(Geofence.Name," - "),'[[',4))) %>%
arrange(Resource.Name, seconds(Enter.Time))
#format dwell time into seconds
tmp <- strsplit(buses$Time.Inside.Geofence..hh.mm.ss., split=":") %>% lapply(as.numeric,1)
dwellTime <- do.call(rbind, lapply(tmp, rbind))
dwellTime <- dwellTime[,1]*60*60 + dwellTime[,2]*60 + dwellTime[,3]
buses$dwellTime <- dwellTime
#calculate departure time (arrival+dwell) and get origin from preceding row
buses <- buses %>% mutate(departure = lag(dwellTime,1)+lag(arrival,1),
origin = ifelse(lag(Resource.Name,1)==Resource.Name,lag(destination,1),"0"))
buses$origin[1] <- "0"
#assign ID
buses <- cbind("ID" = sprintf("%06d", 1:nrow(buses)), buses)
###########################
# STEP 3: Assign Bus Routes
###########################
#define peak periods
am.start <- as.POSIXct("1899-12-30 7:00:00 AEST")
am.end <- as.POSIXct("1899-12-30 9:00:00 AEST")
pm.start <- as.POSIXct("1899-12-30 15:30:00 AEST")
pm.end <- as.POSIXct("1899-12-30 19:00:00 AEST")
#compare bus stopping pattern to route and assign name
#for loop variables
buses$tripID <- c(rep(0,nrow(buses)))
buses$type <- c(rep(0,nrow(buses)))
buses$direction <- c(rep(0,nrow(buses)))
buses$peak <- c(rep(0,nrow(buses)))
for(i in 1:nrow(routes)){
#route stopping patterns
route <- routes[i,]
pattern <- unlist(strsplit(route$stops,",")) %>% trimws() %>% toupper()
pattern.rev <- unlist(strsplit(route$stops,",")) %>% trimws() %>% toupper() %>% rev()
#Filter dataset to dates and times
railRep <- buses %>% filter(departure >= route$start.datetime &
arrival <= route$end.datetime &
between(as.numeric(format(arrival,"%H%M%S")),
as.numeric(format(route$start.time.filter,"%H%M%S")),
as.numeric(format(route$end.time.filter,"%H%M%S"))))
#adjust peak periods
peak.adjust <- minutes(route$peak.adjust)
am.start.route <- (am.start + peak.adjust)
am.end.route <- (am.end + peak.adjust)
pm.start.route <- (pm.start + peak.adjust)
pm.end.route <- (pm.end + peak.adjust)
#while loop variables
stops <- 1
tripID <- 1
org <- railRep$origin %>% trimws() %>% toupper()
des <- railRep$destination %>% trimws() %>% toupper()
N <- length(pattern)
while(stops <= (nrow(railRep)-(N-2))) {
#if bus is travelling in UP direction
if((all.equal(org[stops:(stops+N-2)],pattern[1:(N-1)])==T) &&
(all.equal(des[stops:(stops+N-2)],pattern[2:N])==T)) {
railRep$tripID[stops:(stops+N-2)] <- paste0(gsub(" ","",route$name),
sprintf("%06d",tripID))
railRep$type[stops:(stops+N-2)] = route$name
railRep$direction[stops:(stops+N-2)] = "UP"
railRep$peak[stops:(stops+N-2)] <- peak(railRep$arrival[(stops+N-2)],
am.start.route,am.end.route,
pm.start.route,pm.end.route)
#remove dwelltime from final destination
railRep$dwellTime[(stops+N-2)] = 0
tripID <- tripID+1
stops = stops+(N-1)
}
#if bus is travelling in DOWN direction
else if((all.equal(org[stops:(stops+N-2)],pattern.rev[1:(N-1)])==T) &&
(all.equal(des[stops:(stops+N-2)],pattern.rev[2:N])==T)) {
railRep$tripID[stops:(stops+N-2)] <- paste0(gsub(" ","",route$name),
sprintf("%06d",tripID))
railRep$type[stops:(stops+N-2)] = route$name
railRep$direction[stops:(stops+N-2)] = "DOWN"
railRep$peak[stops:(stops+N-2)] <- peak(railRep$departure[stops],
am.start.route,am.end.route,
pm.start.route,pm.end.route)
#remove dwelltime from final destination
railRep$dwellTime[(stops+N-2)] = 0
tripID <- tripID+1
stops = stops+(N-1)
}
#else not a replacement bus
else(stops = stops+1)
}
#assign replacement buses according to ID
buses$tripID[match(railRep$ID,buses$ID)] <- railRep$tripID
buses$type[match(railRep$ID,buses$ID)] <- railRep$type
buses$direction[match(railRep$ID,buses$ID)] <- railRep$direction
buses$peak[match(railRep$ID,buses$ID)] <- railRep$peak
buses$dwellTime[match(railRep$ID,buses$ID)] <- railRep$dwellTime
}
###########################
# STEP 4: Calculate Metrics
###########################
#remove non RRP Buses and unnecessary columns
railRep <- buses %>% filter(type != "0") %>%
select(ID,Resource.Name,Registration,project,tripID,type,peak,
direction,origin,destination,departure,arrival,dwellTime) %>%
mutate(legTime = round(difftime(arrival,departure, tz = "AEST", units = "mins")+(dwellTime/60),2)) %>%
filter(legTime < 120)
travel_times <- railRep %>%
group_by(tripID, type, direction, peak, Resource.Name, date(departure)) %>%
summarise(Origin = first(origin), Destination = last(destination),
Departure = first(departure), Arrival = last(arrival),
TripTime = sum(legTime))
journey_times <- travel_times %>% group_by(type, peak, direction) %>%
summarise(TravelTimes = round(mean(TripTime),2),
NumBuses = n())
#metrics to calculate:
# Bus OD journey time – Average journey time.
# Suggest metric is daily average split by direction, time band
# (AM Peak, PM Peak, Non-Peak, Weekend, Public Holiday) and stopping pattern.
# Additional journey time– Establish by time band and direction
# the average journey time through the affected area that a normal train/tram service
# would take and then measure the differential from actual bus journey time.
# % Increased journey time – additional journey time / ‘normal’ journey time
# represented as an average with the same aggregations as the OD journey times.
# Bus sample size - # Valid trips / # Buses allocated
# % Services on-time - # Buses delivered with an OD Journey time < 4 minutes and 59 seconds
# more than expected / # Valid trips observed
View(journey_times)
routes
View(routes)
