# #SAS BUS
# else if ((
#   (org[stops] == first(sas) && dest[stops] == sas[2]) &&
#   (lead(org,1)[stops] == sas[2] && lead(dest,1)[stops] == sas[3]) &&
#   (lead(org,2)[stops] == sas[3] && lead(dest,2)[stops] == sas[4])
# )
# ||
# ( #lasst = 7
#   (org[stops] == last(sas) && dest[stops] == sas[7]) &&
#   (lead(org,1)[stops] == sas[7] && lead(dest,1)[stops] == sas[6]) &&
#   (lead(org,2)[stops] == sas[6] && lead(dest,2)[stops] == sas[5])
# ))
# {
#   buses$type[stops:(stops+length(sas)-2)] <- "SAS"
#   stops <- stops+length(sas)-1
# }
else {
buses$type[stops] <- "None"
stops <- stops+1
}
}
stops <- 1
buses$type <- c(rep(0,length(buses$Resource.Name)))
#Iterate to assign bus type based on stopping pattern
############
#ISSUE!!: Currently if a bus enters/exits the same geofence more than once (happening at Oakleigh) -
#the trip is filtered out, even though it might be a legitimate replacement bus
############
while(stops <= length(buses$origin)) {
org = buses$origin
dest = buses$destination
#EXPRESS BUS
if ((
(org[stops] == first(express) && dest[stops] == express[2]) #&&
#(lead(org,1)[stops] == express[2] && lead(dest,1)[stops] == last(express))
#   ||
# (
#   (org[stops] == last(express) && dest[stops] == express[4]) &&
#   (lead(org,1)[stops] == express[4] && lead(dest,1)[stops] == first(express))
))
{
buses$type[stops:(stops+length(express)-2)] <- "Express"
stops <- stops+length(express)-1
}
#LTD EXPRESS BUS
# else if ((
#   (org[stops] == first(ltd_express) && dest[stops] == ltd_express[2]) &&
#   (lead(org,1)[stops] == ltd_express[2] && lead(dest,1)[stops] == ltd_express[3]) &&
#   (lead(org,2)[stops] == ltd_express[3] && lead(dest,2)[stops] == ltd_express[4]) &&
#   (lead(org,3)[stops] == ltd_express[4] && lead(dest,3)[stops] == ltd_express[5]) &&
#   (lead(org,4)[stops] == ltd_express[5] && lead(dest,4)[stops] == ltd_express[6]) &&
#   (lead(org,5)[stops] == ltd_express[6] && lead(dest,5)[stops] == ltd_express[7]) &&
#   (lead(org,5)[stops] == ltd_express[7] && lead(dest,6)[stops] == last(ltd_express))
# )
# ||
# ( #last = 8
#   (org[stops] == last(ltd_express) && dest[stops] == ltd_express[7]) &&
#   (lead(org,1)[stops] == ltd_express[7] && lead(dest,1)[stops] == ltd_express[6]) &&
#   (lead(org,2)[stops] == ltd_express[6] && lead(dest,2)[stops] == ltd_express[5]) &&
#   (lead(org,3)[stops] == ltd_express[5] && lead(dest,3)[stops] == ltd_express[4]) &&
#   (lead(org,4)[stops] == ltd_express[4] && lead(dest,4)[stops] == ltd_express[3]) &&
#   (lead(org,5)[stops] == ltd_express[3] && lead(dest,5)[stops] == ltd_express[2]) &&
#   (lead(org,6)[stops] == ltd_express[2] && lead(dest,6)[stops] == first(ltd_express))
# ))
# {
#   buses$type[stops:(stops+length(ltd_express)-2)] <- "LTD ltd_express"
#   stops <- stops+length(ltd_express)-1
# }
#
# #SAS BUS
# else if ((
#   (org[stops] == first(sas) && dest[stops] == sas[2]) &&
#   (lead(org,1)[stops] == sas[2] && lead(dest,1)[stops] == sas[3]) &&
#   (lead(org,2)[stops] == sas[3] && lead(dest,2)[stops] == sas[4])
# )
# ||
# ( #lasst = 7
#   (org[stops] == last(sas) && dest[stops] == sas[7]) &&
#   (lead(org,1)[stops] == sas[7] && lead(dest,1)[stops] == sas[6]) &&
#   (lead(org,2)[stops] == sas[6] && lead(dest,2)[stops] == sas[5])
# ))
# {
#   buses$type[stops:(stops+length(sas)-2)] <- "SAS"
#   stops <- stops+length(sas)-1
# }
else {
buses$type[stops] <- "None"
stops <- stops+1
}
}
last(express)
#Variables for while loop
stops <- 1
buses$type <- c(rep(0,length(buses$Resource.Name)))
#Iterate to assign bus type based on stopping pattern
############
#ISSUE!!: Currently if a bus enters/exits the same geofence more than once (happening at Oakleigh) -
#the trip is filtered out, even though it might be a legitimate replacement bus
############
while(stops <= length(buses$origin)) {
org = buses$origin
dest = buses$destination
#EXPRESS BUS
if ((
(org[stops] == first(express) && dest[stops] == express[2]) &&
(lead(org,1)[stops] == express[2] && lead(dest,1)[stops] == last(express))
)
#   ||
# (
#   (org[stops] == last(express) && dest[stops] == express[4]) &&
#   (lead(org,1)[stops] == express[4] && lead(dest,1)[stops] == first(express))
)
{
buses$type[stops:(stops+length(express)-2)] <- "Express"
stops <- stops+length(express)-1
}
#LTD EXPRESS BUS
# else if ((
#   (org[stops] == first(ltd_express) && dest[stops] == ltd_express[2]) &&
#   (lead(org,1)[stops] == ltd_express[2] && lead(dest,1)[stops] == ltd_express[3]) &&
#   (lead(org,2)[stops] == ltd_express[3] && lead(dest,2)[stops] == ltd_express[4]) &&
#   (lead(org,3)[stops] == ltd_express[4] && lead(dest,3)[stops] == ltd_express[5]) &&
#   (lead(org,4)[stops] == ltd_express[5] && lead(dest,4)[stops] == ltd_express[6]) &&
#   (lead(org,5)[stops] == ltd_express[6] && lead(dest,5)[stops] == ltd_express[7]) &&
#   (lead(org,5)[stops] == ltd_express[7] && lead(dest,6)[stops] == last(ltd_express))
# )
# ||
# ( #last = 8
#   (org[stops] == last(ltd_express) && dest[stops] == ltd_express[7]) &&
#   (lead(org,1)[stops] == ltd_express[7] && lead(dest,1)[stops] == ltd_express[6]) &&
#   (lead(org,2)[stops] == ltd_express[6] && lead(dest,2)[stops] == ltd_express[5]) &&
#   (lead(org,3)[stops] == ltd_express[5] && lead(dest,3)[stops] == ltd_express[4]) &&
#   (lead(org,4)[stops] == ltd_express[4] && lead(dest,4)[stops] == ltd_express[3]) &&
#   (lead(org,5)[stops] == ltd_express[3] && lead(dest,5)[stops] == ltd_express[2]) &&
#   (lead(org,6)[stops] == ltd_express[2] && lead(dest,6)[stops] == first(ltd_express))
# ))
# {
#   buses$type[stops:(stops+length(ltd_express)-2)] <- "LTD ltd_express"
#   stops <- stops+length(ltd_express)-1
# }
#
# #SAS BUS
# else if ((
#   (org[stops] == first(sas) && dest[stops] == sas[2]) &&
#   (lead(org,1)[stops] == sas[2] && lead(dest,1)[stops] == sas[3]) &&
#   (lead(org,2)[stops] == sas[3] && lead(dest,2)[stops] == sas[4])
# )
# ||
# ( #lasst = 7
#   (org[stops] == last(sas) && dest[stops] == sas[7]) &&
#   (lead(org,1)[stops] == sas[7] && lead(dest,1)[stops] == sas[6]) &&
#   (lead(org,2)[stops] == sas[6] && lead(dest,2)[stops] == sas[5])
# ))
# {
#   buses$type[stops:(stops+length(sas)-2)] <- "SAS"
#   stops <- stops+length(sas)-1
# }
else {
buses$type[stops] <- "None"
stops <- stops+1
}
}
#Variables for while loop
stops <- 1
buses$type <- c(rep(0,length(buses$Resource.Name)))
#Iterate to assign bus type based on stopping pattern
############
#ISSUE!!: Currently if a bus enters/exits the same geofence more than once (happening at Oakleigh) -
#the trip is filtered out, even though it might be a legitimate replacement bus
############
while(stops <= length(buses$origin)) {
org = buses$origin
dest = buses$destination
#EXPRESS BUS
if ((
(org[stops] == first(express) && dest[stops] == express[2]) &&
(lead(org,1)[stops] == express[2] && lead(dest,1)[stops] == last(express))
)
||
(
(org[stops] == last(express) && dest[stops] == express[4]) &&
(lead(org,1)[stops] == express[4] && lead(dest,1)[stops] == first(express))
))
{
buses$type[stops:(stops+length(express)-2)] <- "Express"
stops <- stops+length(express)-1
}
#LTD EXPRESS BUS
# else if ((
#   (org[stops] == first(ltd_express) && dest[stops] == ltd_express[2]) &&
#   (lead(org,1)[stops] == ltd_express[2] && lead(dest,1)[stops] == ltd_express[3]) &&
#   (lead(org,2)[stops] == ltd_express[3] && lead(dest,2)[stops] == ltd_express[4]) &&
#   (lead(org,3)[stops] == ltd_express[4] && lead(dest,3)[stops] == ltd_express[5]) &&
#   (lead(org,4)[stops] == ltd_express[5] && lead(dest,4)[stops] == ltd_express[6]) &&
#   (lead(org,5)[stops] == ltd_express[6] && lead(dest,5)[stops] == ltd_express[7]) &&
#   (lead(org,5)[stops] == ltd_express[7] && lead(dest,6)[stops] == last(ltd_express))
# )
# ||
# ( #last = 8
#   (org[stops] == last(ltd_express) && dest[stops] == ltd_express[7]) &&
#   (lead(org,1)[stops] == ltd_express[7] && lead(dest,1)[stops] == ltd_express[6]) &&
#   (lead(org,2)[stops] == ltd_express[6] && lead(dest,2)[stops] == ltd_express[5]) &&
#   (lead(org,3)[stops] == ltd_express[5] && lead(dest,3)[stops] == ltd_express[4]) &&
#   (lead(org,4)[stops] == ltd_express[4] && lead(dest,4)[stops] == ltd_express[3]) &&
#   (lead(org,5)[stops] == ltd_express[3] && lead(dest,5)[stops] == ltd_express[2]) &&
#   (lead(org,6)[stops] == ltd_express[2] && lead(dest,6)[stops] == first(ltd_express))
# ))
# {
#   buses$type[stops:(stops+length(ltd_express)-2)] <- "LTD ltd_express"
#   stops <- stops+length(ltd_express)-1
# }
#
# #SAS BUS
# else if ((
#   (org[stops] == first(sas) && dest[stops] == sas[2]) &&
#   (lead(org,1)[stops] == sas[2] && lead(dest,1)[stops] == sas[3]) &&
#   (lead(org,2)[stops] == sas[3] && lead(dest,2)[stops] == sas[4])
# )
# ||
# ( #lasst = 7
#   (org[stops] == last(sas) && dest[stops] == sas[7]) &&
#   (lead(org,1)[stops] == sas[7] && lead(dest,1)[stops] == sas[6]) &&
#   (lead(org,2)[stops] == sas[6] && lead(dest,2)[stops] == sas[5])
# ))
# {
#   buses$type[stops:(stops+length(sas)-2)] <- "SAS"
#   stops <- stops+length(sas)-1
# }
else {
buses$type[stops] <- "None"
stops <- stops+1
}
}
#Variables for while loop
stops <- 1
buses$type <- c(rep(0,length(buses$Resource.Name)))
#Iterate to assign bus type based on stopping pattern
############
#ISSUE!!: Currently if a bus enters/exits the same geofence more than once (happening at Oakleigh) -
#the trip is filtered out, even though it might be a legitimate replacement bus
############
while(stops <= length(buses$origin)) {
org = buses$origin
dest = buses$destination
#EXPRESS BUS
if ((
(org[stops] == first(express) && dest[stops] == express[2]) &&
(lead(org,1)[stops] == express[2] && lead(dest,1)[stops] == last(express))
)
||
(
(org[stops] == last(express) && dest[stops] == express[2]) &&
(lead(org,1)[stops] == express[2] && lead(dest,1)[stops] == first(express))
))
{
buses$type[stops:(stops+length(express)-2)] <- "Express"
stops <- stops+length(express)-1
}
#LTD EXPRESS BUS
else if ((
(org[stops] == first(ltd_express) && dest[stops] == ltd_express[2]) &&
(lead(org,1)[stops] == ltd_express[2] && lead(dest,1)[stops] == ltd_express[3]) &&
(lead(org,2)[stops] == ltd_express[3] && lead(dest,2)[stops] == ltd_express[4]) &&
(lead(org,3)[stops] == ltd_express[4] && lead(dest,3)[stops] == ltd_express[5]) &&
(lead(org,4)[stops] == ltd_express[5] && lead(dest,4)[stops] == ltd_express[6]) &&
(lead(org,5)[stops] == ltd_express[6] && lead(dest,5)[stops] == ltd_express[7]) &&
(lead(org,5)[stops] == ltd_express[7] && lead(dest,6)[stops] == last(ltd_express))
)
||
( #last = 8
(org[stops] == last(ltd_express) && dest[stops] == ltd_express[7]) &&
(lead(org,1)[stops] == ltd_express[7] && lead(dest,1)[stops] == ltd_express[6]) &&
(lead(org,2)[stops] == ltd_express[6] && lead(dest,2)[stops] == ltd_express[5]) &&
(lead(org,3)[stops] == ltd_express[5] && lead(dest,3)[stops] == ltd_express[4]) &&
(lead(org,4)[stops] == ltd_express[4] && lead(dest,4)[stops] == ltd_express[3]) &&
(lead(org,5)[stops] == ltd_express[3] && lead(dest,5)[stops] == ltd_express[2]) &&
(lead(org,6)[stops] == ltd_express[2] && lead(dest,6)[stops] == first(ltd_express))
))
{
buses$type[stops:(stops+length(ltd_express)-2)] <- "LTD ltd_express"
stops <- stops+length(ltd_express)-1
}
#SAS BUS
else if ((
(org[stops] == first(sas) && dest[stops] == sas[2]) &&
(lead(org,1)[stops] == sas[2] && lead(dest,1)[stops] == sas[3]) &&
(lead(org,2)[stops] == sas[3] && lead(dest,2)[stops] == sas[4])
)
||
( #lasst = 7
(org[stops] == last(sas) && dest[stops] == sas[7]) &&
(lead(org,1)[stops] == sas[7] && lead(dest,1)[stops] == sas[6]) &&
(lead(org,2)[stops] == sas[6] && lead(dest,2)[stops] == sas[5])
))
{
buses$type[stops:(stops+length(sas)-2)] <- "SAS"
stops <- stops+length(sas)-1
}
else {
buses$type[stops] <- "None"
stops <- stops+1
}
}
#Variables for while loop
stops <- 1
buses$type <- c(rep(0,length(buses$Resource.Name)))
#Iterate to assign bus type based on stopping pattern
############
#ISSUE!!: Currently if a bus enters/exits the same geofence more than once (happening at Oakleigh) -
#the trip is filtered out, even though it might be a legitimate replacement bus
############
while(stops <= length(buses$origin)) {
org = buses$origin
dest = buses$destination
#EXPRESS BUS
if ((
(org[stops] == first(express) && dest[stops] == express[2]) &&
(lead(org,1)[stops] == express[2] && lead(dest,1)[stops] == last(express))
)
||
(
(org[stops] == last(express) && dest[stops] == express[2]) &&
(lead(org,1)[stops] == express[2] && lead(dest,1)[stops] == first(express))
))
{
buses$type[stops:(stops+length(express)-2)] <- "Express"
stops <- stops+length(express)-1
}
#LTD EXPRESS BUS
else if ((
(org[stops] == first(ltd_express) && dest[stops] == ltd_express[2]) &&
(lead(org,1)[stops] == ltd_express[2] && lead(dest,1)[stops] == ltd_express[3]) &&
(lead(org,2)[stops] == ltd_express[3] && lead(dest,2)[stops] == ltd_express[4]) &&
(lead(org,3)[stops] == ltd_express[4] && lead(dest,3)[stops] == ltd_express[5]) &&
(lead(org,4)[stops] == ltd_express[5] && lead(dest,4)[stops] == ltd_express[6]) &&
(lead(org,5)[stops] == ltd_express[6] && lead(dest,5)[stops] == ltd_express[7]) &&
(lead(org,5)[stops] == ltd_express[7] && lead(dest,6)[stops] == last(ltd_express))
)
||
( #last = 8
(org[stops] == last(ltd_express) && dest[stops] == ltd_express[7]) &&
(lead(org,1)[stops] == ltd_express[7] && lead(dest,1)[stops] == ltd_express[6]) &&
(lead(org,2)[stops] == ltd_express[6] && lead(dest,2)[stops] == ltd_express[5]) &&
(lead(org,3)[stops] == ltd_express[5] && lead(dest,3)[stops] == ltd_express[4]) &&
(lead(org,4)[stops] == ltd_express[4] && lead(dest,4)[stops] == ltd_express[3]) &&
(lead(org,5)[stops] == ltd_express[3] && lead(dest,5)[stops] == ltd_express[2]) &&
(lead(org,6)[stops] == ltd_express[2] && lead(dest,6)[stops] == first(ltd_express))
))
{
buses$type[stops:(stops+length(ltd_express)-2)] <- "LTD ltd_express"
stops <- stops+length(ltd_express)-1
}
#SAS BUS
else if ((
(org[stops] == first(sas) && dest[stops] == sas[2]) &&
(lead(org,1)[stops] == sas[2] && lead(dest,1)[stops] == sas[3]) &&
(lead(org,2)[stops] == sas[3] && lead(dest,2)[stops] == sas[4])
)
||
( #last = 4
(org[stops] == last(sas) && dest[stops] == sas[3]) &&
(lead(org,1)[stops] == sas[3] && lead(dest,1)[stops] == sas[2]) &&
(lead(org,2)[stops] == sas[2] && lead(dest,2)[stops] == first(sas))
))
{
buses$type[stops:(stops+length(sas)-2)] <- "SAS"
stops <- stops+length(sas)-1
}
else {
buses$type[stops] <- "None"
stops <- stops+1
}
}
#remove non RRP Buses and unnecessary columns
railRep <- buses %>% filter(type != "None") %>%
select(project,Resource.Name,Registration,type,origin,destination,departure,arrival,dwellTime)
View(railRep)
#variables needed to work out trip ID
startpoints <- c("Caulfield","Westall","Malvern")
new_trips <- railRep$origin %in% startpoints
railRep$tripId <- c(rep(0,length(railRep$Resource.Name)))
id = 0
# logic: if there is no origin (i.e. this is the first data point for the bus) OR
# if the origin is a startpoint, then the leg is part of a new trip
for(leg in seq(1,length(railRep$origin))) {
railRep$tripId[leg] = ifelse(new_trips[leg],id+1,id)
id = ifelse(new_trips[leg],id+1,id)
}
# Determine the peak time
tripDeparture <- railRep %>% filter(!duplicated(tripId)) %>%
select(tripId,departure) %>% mutate(tripDeparture = hour(departure)) %>%
select(tripId,tripDeparture)
railRep <- railRep %>% left_join(tripDeparture,"tripId")
railRep <- railRep %>% mutate(peak = sapply(tripDeparture,function(x){
if(x>6 & x<10){"AM Peak"}
else if (x>9 & x<16){"Intra Peak"}
else if (x>15 & x<19){"PM Peak"}
else {"Off Peak"}
}))
# if the destinationi is Caulfield, Westall or Malvern, the dwelltime = 0, else dwelltime/60 to get minutes
railRep$dwellAdj <- ifelse(railRep$destination %in% startpoints, 0, railRep$dwellTime/60)
# travel_times <- railRep %>%
#   filter(difftime(arrival,departure, tz = "AEST", units = "mins") < 50,
#          !(tripId %in% c(77,127))) %>%
#   group_by(tripId, type, peak) %>%
#   summarise(TripTime = sum(difftime(arrival,departure, tz = "AEST", units = "mins")+dwellAdj))
# travel_times <- travel_times %>% group_by(type, peak) %>%
#   summarise(TravelTimes = mean(TripTime))
# write.csv(travel_times,paste0("test2.csv"))
# write.csv(travel_times,paste0("CTD Bus Travel Times - ",date(Sys.time()-days(1)),".csv"))
###TO DO:
#Add dwell times to total JT - Done
#Calculate time for each leg of journey
leg_times <- railRep %>%
filter(difftime(arrival,departure, tz = "AEST", units = "mins") < 50,
!(tripId %in% c(77,127))) %>%
group_by(tripId, origin, destination, peak, type, departure, arrival) %>%
summarise(TripTime = sum(difftime(arrival,departure, tz = "AEST", units = "mins")+dwellAdj))
leg_times <- leg_times %>% group_by(origin,destination, peak, type) %>%
summarise(TravelTimes = mean(TripTime))
merge_times <- merge(railRep, leg_times, by = c("tripId","type","peak","departure","arrival","origin","destination"), all.x = T)
merge_times <- cbind("CTD_ID" = sprintf("CTD_ID_%06d", 1:nrow(merge_times)), merge_times)
merge_times$tripId <- as.character(merge_times$tripId)
# Validation
tripTime_check <- subset(merge_times, merge_times$TripTime >= 30)
merge_times <- merge_times[c( "CTD_ID"
,"tripId"
,"project"
,"Resource.Name"
,"Registration"
,"departure"
,"arrival"
,"type"
,"peak"
,"origin"
,"destination"
,"dwellAdj"
,"TripTime"
)]
write.csv(merge_times,paste0("Output//CGB Bus Leg Time.csv"))
View(leg_times)
#remove non RRP Buses and unnecessary columns
railRep <- buses %>% filter(type != "None") %>%
select(project,Resource.Name,Registration,type,origin,destination,departure,arrival,dwellTime)
#variables needed to work out trip ID
startpoints <- c("Caulfield","Westall","Malvern")
new_trips <- railRep$origin %in% startpoints
railRep$tripId <- c(rep(0,length(railRep$Resource.Name)))
id = 0
# logic: if there is no origin (i.e. this is the first data point for the bus) OR
# if the origin is a startpoint, then the leg is part of a new trip
for(leg in seq(1,length(railRep$origin))) {
railRep$tripId[leg] = ifelse(new_trips[leg],id+1,id)
id = ifelse(new_trips[leg],id+1,id)
}
# Determine the peak time
tripDeparture <- railRep %>% filter(!duplicated(tripId)) %>%
select(tripId,departure) %>% mutate(tripDeparture = hour(departure)) %>%
select(tripId,tripDeparture)
railRep <- railRep %>% left_join(tripDeparture,"tripId")
railRep <- railRep %>% mutate(peak = sapply(tripDeparture,function(x){
if(x>6 & x<10){"AM Peak"}
else if (x>9 & x<16){"Intra Peak"}
else if (x>15 & x<19){"PM Peak"}
else {"Off Peak"}
}))
# if the destinationi is Caulfield, Westall or Malvern, the dwelltime = 0, else dwelltime/60 to get minutes
railRep$dwellAdj <- ifelse(railRep$destination %in% startpoints, 0, railRep$dwellTime/60)
# travel_times <- railRep %>%
#   filter(difftime(arrival,departure, tz = "AEST", units = "mins") < 50,
#          !(tripId %in% c(77,127))) %>%
#   group_by(tripId, type, peak) %>%
#   summarise(TripTime = sum(difftime(arrival,departure, tz = "AEST", units = "mins")+dwellAdj))
# travel_times <- travel_times %>% group_by(type, peak) %>%
#   summarise(TravelTimes = mean(TripTime))
# write.csv(travel_times,paste0("test2.csv"))
# write.csv(travel_times,paste0("CTD Bus Travel Times - ",date(Sys.time()-days(1)),".csv"))
###TO DO:
#Add dwell times to total JT - Done
#Calculate time for each leg of journey
leg_times <- railRep %>%
filter(difftime(arrival,departure, tz = "AEST", units = "mins") < 50,
!(tripId %in% c(77,127))) %>%
group_by(tripId, origin, destination, peak, type, departure, arrival) %>%
summarise(TripTime = sum(difftime(arrival,departure, tz = "AEST", units = "mins")+dwellAdj))
# leg_times <- leg_times %>% group_by(origin,destination, peak, type) %>%
#  summarise(TravelTimes = mean(TripTime))
# write.csv(leg_times,paste0("CTD Bus Leg Times - ",date(Sys.time()-days(1)),".csv"))
merge_times <- merge(railRep, leg_times, by = c("tripId","type","peak","departure","arrival","origin","destination"), all.x = T)
merge_times <- cbind("CTD_ID" = sprintf("CTD_ID_%06d", 1:nrow(merge_times)), merge_times)
merge_times$tripId <- as.character(merge_times$tripId)
# Validation
tripTime_check <- subset(merge_times, merge_times$TripTime >= 30)
merge_times <- merge_times[c( "CTD_ID"
,"tripId"
,"project"
,"Resource.Name"
,"Registration"
,"departure"
,"arrival"
,"type"
,"peak"
,"origin"
,"destination"
,"dwellAdj"
,"TripTime"
)]
write.csv(merge_times,paste0("Output//CGB Bus Leg Time.csv"))
leg_times <- leg_times %>% group_by(origin,destination, peak, type) %>%
summarise(TravelTimes = mean(TripTime))
View(buses)
View(leg_times)
